apply plugin: 'base'


buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.6'
    }
}

subprojects {
    apply plugin: 'maven-publish'
    apply plugin: 'com.jfrog.bintray'
    apply plugin: "java"

    group = 'de.jensd'
    sourceCompatibility = '1.9'
    [compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

    bintray {
        user = System.getenv('BINTRAY_USER')
        key = System.getenv('BINTRAY_KEY')
        pkg {
            repo = 'maven'
            name = 'FontAwesomeFX'
            userOrg = 'jerady'
            licenses = ['Apache-2.0']
            vcsUrl = 'https://Jerady@bitbucket.org/Jerady/fontawesomefx.git'
            publications = ['mavenJava']
            websiteUrl = 'https://bitbucket.org/Jerady/fontawesomefx/overview'
            issueTrackerUrl = 'https://bitbucket.org/Jerady/fontawesomefx/issues'
            publicDownloadNumbers = true
            version {
                name = '9.0'
                desc = 'FontAwesomeFX 9.0'
                vcsTag = 'fontawesomefx-9.0'
            }
        }
    }
    


    repositories {
        mavenCentral()
        mavenLocal()
    }

    task javadocJar(type: Jar) {
        classifier 'javadoc'
        from javadoc.destinationDir
    }

    task sourceJar(type: Jar) {
        from sourceSets.main.allJava
        classifier "sources"
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
                artifact sourceJar {
                    classifier "sources"
                }

                artifact javadocJar {
                    classifier "javadoc"
                }
            }
        }
    }

    dependencies {
        testCompile 'junit:junit:4.10'
    }

    afterEvaluate {
        repositories {
            jcenter()
        }

        compileJava {
            doFirst {
                options.compilerArgs = [
                        '--module-path', classpath.asPath,
                ]
                classpath = files()
            }
        }

        test {
            inputs.property("moduleName", moduleName)
            doFirst {
                jvmArgs = [
                        '--module-path', classpath.asPath,
                        '--add-modules', 'ALL-MODULE-PATH',
                        '--add-reads', "$moduleName=junit",
                        '--patch-module', "$moduleName=" + files(sourceSets.test.java.outputDir).asPath,
                ]
                classpath = files()
            }
        }

        jar {
            inputs.property("moduleName", moduleName)
            manifest {
                attributes('Main-Class': mainClassName)
                attributes('Automatic-Module-Name': moduleName)
            }
        }

    }

}

task wrapper(type: Wrapper) {
    gradleVersion = '4.2'
}